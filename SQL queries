--Find the total sales across all orders

SELECT
	SUM(Sales) AS Total_sales
FROM Sales.Orders;

--Find the total sales for each product

SELECT
	ProductID,
	SUM(Sales) Total_sales
FROM Sales.Orders
GROUP BY ProductID;

--Find the total sales for each product. Additionally, provide details such as order id & order date

SELECT
	OrderID,
	OrderDate,
	ProductID,
	SUM(Sales) OVER(PARTITION BY ProductID) AS Total_sales_by_product
FROM Sales.Orders;

--Find the total sales across all orders. Additionally, provide details such as order id & order date

SELECT
	OrderID,
	OrderDate,
	SUM(Sales) OVER() Total_sales
FROM Sales.Orders;

--Rank each order based on their sales from the highest to the lowest.

SELECT 
	OrderID,
	Sales,
	RANK() OVER(ORDER BY Sales DESC) AS Sales_rank
FROM Sales.Orders

--Rank the customers based on their total sales

SELECT
	CustomerID,
	SUM(Sales) AS Total_sales_by_customer,
	RANK() OVER(ORDER BY SUM(Sales) DESC) AS Sales_rank_by_customer
FROM Sales.Orders
GROUP BY CustomerID;

--Find the total number of orders

SELECT 
	COUNT(*) Total_orders
FROM Sales.Orders;

/*Find the total number of orders
Provide details such as order id and order date
*/

SELECT 
	OrderID,
	OrderDate,
	COUNT(*) OVER() Total_orders
FROM Sales.Orders;

-- Find the total number of orders for each customer

SELECT 
	CustomerID,
	COUNT(OrderID) OVER(PARTITION BY CustomerID) AS Sales_by_customer
FROM Sales.Orders;

/*Find the total number of customers
Additionally, provide all customer's details
*/

SELECT
	FirstName,
	LastName,
	Country,
	COUNT(*) OVER() Total_number_of_customers
FROM Sales.Customers;

--Find the total number of scores for customers

SELECT
	COUNT(Score) AS Customer_score_count
FROM Sales.Customers;

-- Check whether the table 'orders' contains any duplicate rows

SELECT
	OrderID,
	COUNT(*) AS CheckPK
FROM Sales.Orders
GROUP BY OrderID;

SELECT
	OrderID,
	COUNT(*) AS CheckPK
FROM Sales.OrdersArchive
GROUP BY OrderID;

/*Find the total sales accross all orders
and the total sales for each product
Additionally, provide details such as order id and order date*/

SELECT
	OrderID,
	OrderDate,
	ProductID,
	SUM(Sales) OVER(PARTITION BY ProductID) AS Sale_by_product,
	SUM(Sales) OVER() AS Total_sales
FROM Sales.Orders;

--Find the percentage contribution of each product's sales to the total sales

SELECT
	*,
	ROUND(CAST(Sales AS FLOAT)/Total_sales * 100.0, 0) AS Pecentage_of_total
FROM
(
SELECT
	ProductID,
	Sales,
	SUM(Sales) OVER() AS Total_sales
FROM Sales.Orders
)t
/* Find the average sales across all orders
and the average sales for each product.
Additionally, provide details such as order id and order date.*/

SELECT
	OrderID,
	OrderDate,
	ProductID,
	AVG(Sales) OVER() AS AvgSalesAllOrders,
	AVG(Sales) OVER(PARTITION BY ProductID) AvgSalesByProduct
FROM Sales.Orders;

/* Find the average scores of customers.
Additionally, provide details such as customer Id and Last Name.*/

SELECT
	CustomerID,
	LastName,
	Score,
	AVG(Score) OVER() AS AvgScoresWithNull,
	AVG(COALESCE(Score, 0)) OVER() AS AvgScores
FROM Sales.Customers;

/* Find all orders where the sales
are higher than the average sales across all orders*/

SELECT * 
FROM
(
	SELECT 
		OrderID,
		Sales,
		AVG(Sales) OVER() AvgSales
	FROM Sales.Orders
)t
WHERE Sales > AvgSales;
/* Find the highest and lowest sales across all orders
and the highest and lowest sales for each product.
Additionally, provide details such as order id and order date.*/

SELECT
	OrderID,
	OrderDate,
	Sales,
	ProductID,
	MIN(Sales) OVER(PARTITION BY ProductID) AS MinSalesByProduct,
	MAX(Sales) OVER(PARTITION BY ProductID) AS MaxSalesByProduct,
	MIN(Sales) OVER() AS MinSalesOverall,
	MAX(Sales) OVER() AS MaxSalesOverall
FROM Sales.Orders;

--Show the employees with the highest salaries

SELECT
	*
FROM
(
	SELECT 
		*,
		MAX(Salary) OVER() AS HighestSalary
	FROM Sales.Employees
)t
WHERE Salary = HighestSalary;

-- Find the deviation of each sale from the minimum and the maximum sales amount

SELECT
	OrderID,
	OrderDate,
	Sales,
	ProductID,
	MIN(Sales) OVER(PARTITION BY ProductID) AS MinSalesByProduct,
	MAX(Sales) OVER(PARTITION BY ProductID) AS MaxSalesByProduct,
	MIN(Sales) OVER() AS MinSalesOverall,
	MAX(Sales) OVER() AS MaxSalesOverall,
	Sales - MIN(Sales) OVER() AS DevFromMin,
	Sales - MAX(Sales) OVER() AS DevFromMax
FROM Sales.Orders;
